1. git으로 관리할 경로로 이동
2. 초기화(.git 폴더 생성)
$ git init

3. 브랜치 이름 기본값 main으로 설정하기 (optional)
$ git config --global init.defaultBranch main

4. git 상태 확인 (optional)
$ git status

5. git 으로 관리중인 '모든'파일을 추가
$ git add .

6. commit: add 한 시점을 저장
$ git commit -m "simple explanation msg"

7. commit 이전, 개인정보 등록 (global 옵션은 컴퓨터 전체에 적용됨)
$ git config --global user.name "Your name"
$ git config --global user.email "your@email.com

8. commit 정보 확인
$ git log

========================
[github에 코드 업로드 하기]
1. remote 정보 확인
$ git remote
$ git remote -v

2. remote 추가
$ git remote add 리모트이름 github repository주소
$ git remote add origin https://github.com/seon-creator/git-practice.git

3. remote 삭제 (option)
$ git remote rm 리모트이름
$ git remote rm origin

4. 파일 내용 업로드
$ git push -u 리모트이름 branch_name
$ git push -u origin main
(-u 옵션: 다음 명령어부터는 git push 만 해도 동일하게 동작함)

========================
[github에서 코드 불러오기]
clone
- 로컬에 코드가 없는 상태에서 코드를 다운받을 때

pull
- 로컬에 코드가 있는 상태에서 변경사항을 불러올 때

========================
[branch]
- branch 목록 확인
$ git branch

- branch 생성
$ git branch test01

- branch 이동
$ git switch test01

- 해당 branch에서 add, commit, push 작업 진행 동일

------------------------
- branch 병합
- main branch 에서 진행할 것(일반적)
$ git merge 브랜치명
$ git add .
$ git commit -m "info"

- 특정 branch 삭제 (local)
$ git branch -d 브랜치명

- remote branch 정보 삭제
$ git push origin --delete 브랜치명

- 브랜치 복구
$ git branch 브랜치명 커밋번호

git log --grep --oneline

- 원격 저장소와 로컬 저장소 파일을 삭제
$ git rm 파일명
 
- 원격 저장소에 있는 파일만 삭제하고, 로컬 저장소에 있는 파일은 삭제하지 않음
$ git rm --cached 파일명

- 파일 삭제
$ git rm --cached 파일명
 
- 폴더 하위의 모든 파일을 삭제
$ git rm -r --cached 폴더명

[.gitignore]
- .gitignore이 동작하지 않을 때
$ git rm -r --cached .
$ git add .
$ git commit -m "fixed untracked files"

[reset]
–soft:
커밋을 취소하지만 스테이징 영역에는 그대로 남겨둡니다.
워킹 디렉토리의 변경 사항은 그대로 유지됩니다.
스테이징 영역의 변경 사항은 그대로 유지됩니다.
커밋 기록은 변경되지 않습니다.

–mixed:
커밋을 취소하고 스테이징 영역을 비웁니다.
워킹 디렉토리의 변경 사항은 그대로 유지됩니다.
스테이징 영역은 비워집니다.
커밋 기록은 변경되지 않습니다.

–hard:
커밋을 취소하고 스테이징 영역과 워킹 디렉토리를 모두 이전 상태로 되돌립니다.
워킹 디렉토리의 변경 사항은 모두 삭제됩니다.
스테이징 영역은 비워집니다.
커밋 기록은 변경됩니다.

$ git reset --soft 커밋id(7자리)
$ git reset --mixed 커밋id(7자리)
$ git reset --hard

[revert]: 특정 commit 단계로 전환할 때
$ git revert hash번호(7자리정도)

- revert 후에는 commit을 해야 revert가 완료됨
$ git commit -m "revert complete to hash번호"

- revert를 취소하고 싶다면 아래 명령어 입력
$ git reset --hard